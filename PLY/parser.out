Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM VAR_ID PUNTO_COMMA vars_pos bloque
Rule 2     vars_pos -> vars
Rule 3     vars_pos -> empty
Rule 4     vars -> VAR vars_start
Rule 5     vars_start -> vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add
Rule 6     vars_id -> VAR_ID vars_more
Rule 7     vars_more -> COMMA vars_id
Rule 8     vars_more -> empty
Rule 9     vars_add -> vars_start
Rule 10    vars_add -> empty
Rule 11    tipo -> INT
Rule 12    tipo -> FLOAT
Rule 13    bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER
Rule 14    bloque_dentro -> estatuto bloque_dentro
Rule 15    bloque_dentro -> empty
Rule 16    estatuto -> asignacion
Rule 17    estatuto -> condicion
Rule 18    estatuto -> escritura
Rule 19    asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA
Rule 20    expresion -> exp expresion_relop
Rule 21    expresion_relop -> MAYOR exp
Rule 22    expresion_relop -> MENOR exp
Rule 23    expresion_relop -> NO_IGUAL exp
Rule 24    expresion_relop -> empty
Rule 25    escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA
Rule 26    escritura_exp -> expresion escritura_pos
Rule 27    escritura_exp -> VAR_STRING escritura_pos
Rule 28    escritura_pos -> COMMA escritura_pos
Rule 29    escritura_pos -> empty
Rule 30    condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA
Rule 31    condicion_pos -> ELSE bloque
Rule 32    condicion_pos -> empty
Rule 33    exp -> termino exp_pos
Rule 34    exp_pos -> SUMA exp
Rule 35    exp_pos -> RESTA exp
Rule 36    exp_pos -> empty
Rule 37    termino -> factor termino_pos
Rule 38    termino_pos -> MULTIPLICACION termino
Rule 39    termino_pos -> DIVISION termino
Rule 40    termino_pos -> empty
Rule 41    factor -> PAR_IZQ expresion PAR_DER
Rule 42    factor -> factor_pos var_cte
Rule 43    factor_pos -> SUMA
Rule 44    factor_pos -> RESTA
Rule 45    factor_pos -> empty
Rule 46    var_cte -> VAR_ID
Rule 47    var_cte -> VAR_INT
Rule 48    var_cte -> VAR_FLOAT
Rule 49    empty -> <empty>

Terminals, with rules where they appear

BRACKET_DER          : 13
BRACKET_IZQ          : 13
COMMA                : 7 28
DIVISION             : 39
DOBLE_PUNTO          : 5
ELSE                 : 31
FLOAT                : 12
IF                   : 30
IGUAL                : 19
INT                  : 11
MAYOR                : 21
MENOR                : 22
MULTIPLICACION       : 38
NO_IGUAL             : 23
PAR_DER              : 25 30 41
PAR_IZQ              : 25 30 41
PRINT                : 25
PROGRAM              : 1
PUNTO_COMMA          : 1 5 19 25 30
RESTA                : 35 44
SUMA                 : 34 43
VAR                  : 4
VAR_FLOAT            : 48
VAR_ID               : 1 6 19 46
VAR_INT              : 47
VAR_STRING           : 27
error                : 

Nonterminals, with rules where they appear

asignacion           : 16
bloque               : 1 30 31
bloque_dentro        : 13 14
condicion            : 17
condicion_pos        : 30
empty                : 3 8 10 15 24 29 32 36 40 45
escritura            : 18
escritura_exp        : 25
escritura_pos        : 26 27 28
estatuto             : 14
exp                  : 20 21 22 23 34 35
exp_pos              : 33
expresion            : 19 26 30 41
expresion_relop      : 20
factor               : 37
factor_pos           : 42
programa             : 0
termino              : 33 38 39
termino_pos          : 37
tipo                 : 5
var_cte              : 42
vars                 : 2
vars_add             : 5
vars_id              : 5 7
vars_more            : 6
vars_pos             : 1
vars_start           : 4 9

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM VAR_ID PUNTO_COMMA vars_pos bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . VAR_ID PUNTO_COMMA vars_pos bloque

    VAR_ID          shift and go to state 3


state 3

    (1) programa -> PROGRAM VAR_ID . PUNTO_COMMA vars_pos bloque

    PUNTO_COMMA     shift and go to state 4


state 4

    (1) programa -> PROGRAM VAR_ID PUNTO_COMMA . vars_pos bloque
    (2) vars_pos -> . vars
    (3) vars_pos -> . empty
    (4) vars -> . VAR vars_start
    (49) empty -> .

    VAR             shift and go to state 8
    BRACKET_IZQ     reduce using rule 49 (empty -> .)

    vars_pos                       shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) programa -> PROGRAM VAR_ID PUNTO_COMMA vars_pos . bloque
    (13) bloque -> . BRACKET_IZQ bloque_dentro BRACKET_DER

    BRACKET_IZQ     shift and go to state 10

    bloque                         shift and go to state 9

state 6

    (2) vars_pos -> vars .

    BRACKET_IZQ     reduce using rule 2 (vars_pos -> vars .)


state 7

    (3) vars_pos -> empty .

    BRACKET_IZQ     reduce using rule 3 (vars_pos -> empty .)


state 8

    (4) vars -> VAR . vars_start
    (5) vars_start -> . vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add
    (6) vars_id -> . VAR_ID vars_more

    VAR_ID          shift and go to state 13

    vars_start                     shift and go to state 11
    vars_id                        shift and go to state 12

state 9

    (1) programa -> PROGRAM VAR_ID PUNTO_COMMA vars_pos bloque .

    $end            reduce using rule 1 (programa -> PROGRAM VAR_ID PUNTO_COMMA vars_pos bloque .)


state 10

    (13) bloque -> BRACKET_IZQ . bloque_dentro BRACKET_DER
    (14) bloque_dentro -> . estatuto bloque_dentro
    (15) bloque_dentro -> . empty
    (16) estatuto -> . asignacion
    (17) estatuto -> . condicion
    (18) estatuto -> . escritura
    (49) empty -> .
    (19) asignacion -> . VAR_ID IGUAL expresion PUNTO_COMMA
    (30) condicion -> . IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA
    (25) escritura -> . PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA

    BRACKET_DER     reduce using rule 49 (empty -> .)
    VAR_ID          shift and go to state 20
    IF              shift and go to state 21
    PRINT           shift and go to state 22

    bloque_dentro                  shift and go to state 14
    estatuto                       shift and go to state 15
    empty                          shift and go to state 16
    asignacion                     shift and go to state 17
    condicion                      shift and go to state 18
    escritura                      shift and go to state 19

state 11

    (4) vars -> VAR vars_start .

    BRACKET_IZQ     reduce using rule 4 (vars -> VAR vars_start .)


state 12

    (5) vars_start -> vars_id . DOBLE_PUNTO tipo PUNTO_COMMA vars_add

    DOBLE_PUNTO     shift and go to state 23


state 13

    (6) vars_id -> VAR_ID . vars_more
    (7) vars_more -> . COMMA vars_id
    (8) vars_more -> . empty
    (49) empty -> .

    COMMA           shift and go to state 25
    DOBLE_PUNTO     reduce using rule 49 (empty -> .)

    vars_more                      shift and go to state 24
    empty                          shift and go to state 26

state 14

    (13) bloque -> BRACKET_IZQ bloque_dentro . BRACKET_DER

    BRACKET_DER     shift and go to state 27


state 15

    (14) bloque_dentro -> estatuto . bloque_dentro
    (14) bloque_dentro -> . estatuto bloque_dentro
    (15) bloque_dentro -> . empty
    (16) estatuto -> . asignacion
    (17) estatuto -> . condicion
    (18) estatuto -> . escritura
    (49) empty -> .
    (19) asignacion -> . VAR_ID IGUAL expresion PUNTO_COMMA
    (30) condicion -> . IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA
    (25) escritura -> . PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA

    BRACKET_DER     reduce using rule 49 (empty -> .)
    VAR_ID          shift and go to state 20
    IF              shift and go to state 21
    PRINT           shift and go to state 22

    estatuto                       shift and go to state 15
    bloque_dentro                  shift and go to state 28
    empty                          shift and go to state 16
    asignacion                     shift and go to state 17
    condicion                      shift and go to state 18
    escritura                      shift and go to state 19

state 16

    (15) bloque_dentro -> empty .

    BRACKET_DER     reduce using rule 15 (bloque_dentro -> empty .)


state 17

    (16) estatuto -> asignacion .

    VAR_ID          reduce using rule 16 (estatuto -> asignacion .)
    IF              reduce using rule 16 (estatuto -> asignacion .)
    PRINT           reduce using rule 16 (estatuto -> asignacion .)
    BRACKET_DER     reduce using rule 16 (estatuto -> asignacion .)


state 18

    (17) estatuto -> condicion .

    VAR_ID          reduce using rule 17 (estatuto -> condicion .)
    IF              reduce using rule 17 (estatuto -> condicion .)
    PRINT           reduce using rule 17 (estatuto -> condicion .)
    BRACKET_DER     reduce using rule 17 (estatuto -> condicion .)


state 19

    (18) estatuto -> escritura .

    VAR_ID          reduce using rule 18 (estatuto -> escritura .)
    IF              reduce using rule 18 (estatuto -> escritura .)
    PRINT           reduce using rule 18 (estatuto -> escritura .)
    BRACKET_DER     reduce using rule 18 (estatuto -> escritura .)


state 20

    (19) asignacion -> VAR_ID . IGUAL expresion PUNTO_COMMA

    IGUAL           shift and go to state 29


state 21

    (30) condicion -> IF . PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA

    PAR_IZQ         shift and go to state 30


state 22

    (25) escritura -> PRINT . PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA

    PAR_IZQ         shift and go to state 31


state 23

    (5) vars_start -> vars_id DOBLE_PUNTO . tipo PUNTO_COMMA vars_add
    (11) tipo -> . INT
    (12) tipo -> . FLOAT

    INT             shift and go to state 33
    FLOAT           shift and go to state 34

    tipo                           shift and go to state 32

state 24

    (6) vars_id -> VAR_ID vars_more .

    DOBLE_PUNTO     reduce using rule 6 (vars_id -> VAR_ID vars_more .)


state 25

    (7) vars_more -> COMMA . vars_id
    (6) vars_id -> . VAR_ID vars_more

    VAR_ID          shift and go to state 13

    vars_id                        shift and go to state 35

state 26

    (8) vars_more -> empty .

    DOBLE_PUNTO     reduce using rule 8 (vars_more -> empty .)


state 27

    (13) bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER .

    $end            reduce using rule 13 (bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER .)
    ELSE            reduce using rule 13 (bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER .)
    PUNTO_COMMA     reduce using rule 13 (bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER .)


state 28

    (14) bloque_dentro -> estatuto bloque_dentro .

    BRACKET_DER     reduce using rule 14 (bloque_dentro -> estatuto bloque_dentro .)


state 29

    (19) asignacion -> VAR_ID IGUAL . expresion PUNTO_COMMA
    (20) expresion -> . exp expresion_relop
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    expresion                      shift and go to state 36
    exp                            shift and go to state 37
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 30

    (30) condicion -> IF PAR_IZQ . expresion PAR_DER bloque condicion_pos PUNTO_COMMA
    (20) expresion -> . exp expresion_relop
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    expresion                      shift and go to state 45
    exp                            shift and go to state 37
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 31

    (25) escritura -> PRINT PAR_IZQ . escritura_exp PAR_DER PUNTO_COMMA
    (26) escritura_exp -> . expresion escritura_pos
    (27) escritura_exp -> . VAR_STRING escritura_pos
    (20) expresion -> . exp expresion_relop
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    VAR_STRING      shift and go to state 48
    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    escritura_exp                  shift and go to state 46
    expresion                      shift and go to state 47
    exp                            shift and go to state 37
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 32

    (5) vars_start -> vars_id DOBLE_PUNTO tipo . PUNTO_COMMA vars_add

    PUNTO_COMMA     shift and go to state 49


state 33

    (11) tipo -> INT .

    PUNTO_COMMA     reduce using rule 11 (tipo -> INT .)


state 34

    (12) tipo -> FLOAT .

    PUNTO_COMMA     reduce using rule 12 (tipo -> FLOAT .)


state 35

    (7) vars_more -> COMMA vars_id .

    DOBLE_PUNTO     reduce using rule 7 (vars_more -> COMMA vars_id .)


state 36

    (19) asignacion -> VAR_ID IGUAL expresion . PUNTO_COMMA

    PUNTO_COMMA     shift and go to state 50


state 37

    (20) expresion -> exp . expresion_relop
    (21) expresion_relop -> . MAYOR exp
    (22) expresion_relop -> . MENOR exp
    (23) expresion_relop -> . NO_IGUAL exp
    (24) expresion_relop -> . empty
    (49) empty -> .

    MAYOR           shift and go to state 52
    MENOR           shift and go to state 53
    NO_IGUAL        shift and go to state 54
    PUNTO_COMMA     reduce using rule 49 (empty -> .)
    PAR_DER         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    expresion_relop                shift and go to state 51
    empty                          shift and go to state 55

state 38

    (33) exp -> termino . exp_pos
    (34) exp_pos -> . SUMA exp
    (35) exp_pos -> . RESTA exp
    (36) exp_pos -> . empty
    (49) empty -> .

    SUMA            shift and go to state 57
    RESTA           shift and go to state 58
    MAYOR           reduce using rule 49 (empty -> .)
    MENOR           reduce using rule 49 (empty -> .)
    NO_IGUAL        reduce using rule 49 (empty -> .)
    PUNTO_COMMA     reduce using rule 49 (empty -> .)
    PAR_DER         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    exp_pos                        shift and go to state 56
    empty                          shift and go to state 59

state 39

    (37) termino -> factor . termino_pos
    (38) termino_pos -> . MULTIPLICACION termino
    (39) termino_pos -> . DIVISION termino
    (40) termino_pos -> . empty
    (49) empty -> .

    MULTIPLICACION  shift and go to state 61
    DIVISION        shift and go to state 62
    SUMA            reduce using rule 49 (empty -> .)
    RESTA           reduce using rule 49 (empty -> .)
    MAYOR           reduce using rule 49 (empty -> .)
    MENOR           reduce using rule 49 (empty -> .)
    NO_IGUAL        reduce using rule 49 (empty -> .)
    PUNTO_COMMA     reduce using rule 49 (empty -> .)
    PAR_DER         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    termino_pos                    shift and go to state 60
    empty                          shift and go to state 63

state 40

    (41) factor -> PAR_IZQ . expresion PAR_DER
    (20) expresion -> . exp expresion_relop
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    expresion                      shift and go to state 64
    exp                            shift and go to state 37
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 41

    (42) factor -> factor_pos . var_cte
    (46) var_cte -> . VAR_ID
    (47) var_cte -> . VAR_INT
    (48) var_cte -> . VAR_FLOAT

    VAR_ID          shift and go to state 66
    VAR_INT         shift and go to state 67
    VAR_FLOAT       shift and go to state 68

    var_cte                        shift and go to state 65

state 42

    (43) factor_pos -> SUMA .

    VAR_ID          reduce using rule 43 (factor_pos -> SUMA .)
    VAR_INT         reduce using rule 43 (factor_pos -> SUMA .)
    VAR_FLOAT       reduce using rule 43 (factor_pos -> SUMA .)


state 43

    (44) factor_pos -> RESTA .

    VAR_ID          reduce using rule 44 (factor_pos -> RESTA .)
    VAR_INT         reduce using rule 44 (factor_pos -> RESTA .)
    VAR_FLOAT       reduce using rule 44 (factor_pos -> RESTA .)


state 44

    (45) factor_pos -> empty .

    VAR_ID          reduce using rule 45 (factor_pos -> empty .)
    VAR_INT         reduce using rule 45 (factor_pos -> empty .)
    VAR_FLOAT       reduce using rule 45 (factor_pos -> empty .)


state 45

    (30) condicion -> IF PAR_IZQ expresion . PAR_DER bloque condicion_pos PUNTO_COMMA

    PAR_DER         shift and go to state 69


state 46

    (25) escritura -> PRINT PAR_IZQ escritura_exp . PAR_DER PUNTO_COMMA

    PAR_DER         shift and go to state 70


state 47

    (26) escritura_exp -> expresion . escritura_pos
    (28) escritura_pos -> . COMMA escritura_pos
    (29) escritura_pos -> . empty
    (49) empty -> .

    COMMA           shift and go to state 72
    PAR_DER         reduce using rule 49 (empty -> .)

    escritura_pos                  shift and go to state 71
    empty                          shift and go to state 73

state 48

    (27) escritura_exp -> VAR_STRING . escritura_pos
    (28) escritura_pos -> . COMMA escritura_pos
    (29) escritura_pos -> . empty
    (49) empty -> .

    COMMA           shift and go to state 72
    PAR_DER         reduce using rule 49 (empty -> .)

    escritura_pos                  shift and go to state 74
    empty                          shift and go to state 73

state 49

    (5) vars_start -> vars_id DOBLE_PUNTO tipo PUNTO_COMMA . vars_add
    (9) vars_add -> . vars_start
    (10) vars_add -> . empty
    (5) vars_start -> . vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add
    (49) empty -> .
    (6) vars_id -> . VAR_ID vars_more

    BRACKET_IZQ     reduce using rule 49 (empty -> .)
    VAR_ID          shift and go to state 13

    vars_id                        shift and go to state 12
    vars_add                       shift and go to state 75
    vars_start                     shift and go to state 76
    empty                          shift and go to state 77

state 50

    (19) asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA .

    VAR_ID          reduce using rule 19 (asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA .)
    IF              reduce using rule 19 (asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA .)
    PRINT           reduce using rule 19 (asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA .)
    BRACKET_DER     reduce using rule 19 (asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA .)


state 51

    (20) expresion -> exp expresion_relop .

    PUNTO_COMMA     reduce using rule 20 (expresion -> exp expresion_relop .)
    PAR_DER         reduce using rule 20 (expresion -> exp expresion_relop .)
    COMMA           reduce using rule 20 (expresion -> exp expresion_relop .)


state 52

    (21) expresion_relop -> MAYOR . exp
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    exp                            shift and go to state 78
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 53

    (22) expresion_relop -> MENOR . exp
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    exp                            shift and go to state 79
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 54

    (23) expresion_relop -> NO_IGUAL . exp
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    exp                            shift and go to state 80
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 55

    (24) expresion_relop -> empty .

    PUNTO_COMMA     reduce using rule 24 (expresion_relop -> empty .)
    PAR_DER         reduce using rule 24 (expresion_relop -> empty .)
    COMMA           reduce using rule 24 (expresion_relop -> empty .)


state 56

    (33) exp -> termino exp_pos .

    MAYOR           reduce using rule 33 (exp -> termino exp_pos .)
    MENOR           reduce using rule 33 (exp -> termino exp_pos .)
    NO_IGUAL        reduce using rule 33 (exp -> termino exp_pos .)
    PUNTO_COMMA     reduce using rule 33 (exp -> termino exp_pos .)
    PAR_DER         reduce using rule 33 (exp -> termino exp_pos .)
    COMMA           reduce using rule 33 (exp -> termino exp_pos .)


state 57

    (34) exp_pos -> SUMA . exp
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    exp                            shift and go to state 81
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 58

    (35) exp_pos -> RESTA . exp
    (33) exp -> . termino exp_pos
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    exp                            shift and go to state 82
    termino                        shift and go to state 38
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 59

    (36) exp_pos -> empty .

    MAYOR           reduce using rule 36 (exp_pos -> empty .)
    MENOR           reduce using rule 36 (exp_pos -> empty .)
    NO_IGUAL        reduce using rule 36 (exp_pos -> empty .)
    PUNTO_COMMA     reduce using rule 36 (exp_pos -> empty .)
    PAR_DER         reduce using rule 36 (exp_pos -> empty .)
    COMMA           reduce using rule 36 (exp_pos -> empty .)


state 60

    (37) termino -> factor termino_pos .

    SUMA            reduce using rule 37 (termino -> factor termino_pos .)
    RESTA           reduce using rule 37 (termino -> factor termino_pos .)
    MAYOR           reduce using rule 37 (termino -> factor termino_pos .)
    MENOR           reduce using rule 37 (termino -> factor termino_pos .)
    NO_IGUAL        reduce using rule 37 (termino -> factor termino_pos .)
    PUNTO_COMMA     reduce using rule 37 (termino -> factor termino_pos .)
    PAR_DER         reduce using rule 37 (termino -> factor termino_pos .)
    COMMA           reduce using rule 37 (termino -> factor termino_pos .)


state 61

    (38) termino_pos -> MULTIPLICACION . termino
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    termino                        shift and go to state 83
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 62

    (39) termino_pos -> DIVISION . termino
    (37) termino -> . factor termino_pos
    (41) factor -> . PAR_IZQ expresion PAR_DER
    (42) factor -> . factor_pos var_cte
    (43) factor_pos -> . SUMA
    (44) factor_pos -> . RESTA
    (45) factor_pos -> . empty
    (49) empty -> .

    PAR_IZQ         shift and go to state 40
    SUMA            shift and go to state 42
    RESTA           shift and go to state 43
    VAR_ID          reduce using rule 49 (empty -> .)
    VAR_INT         reduce using rule 49 (empty -> .)
    VAR_FLOAT       reduce using rule 49 (empty -> .)

    termino                        shift and go to state 84
    factor                         shift and go to state 39
    factor_pos                     shift and go to state 41
    empty                          shift and go to state 44

state 63

    (40) termino_pos -> empty .

    SUMA            reduce using rule 40 (termino_pos -> empty .)
    RESTA           reduce using rule 40 (termino_pos -> empty .)
    MAYOR           reduce using rule 40 (termino_pos -> empty .)
    MENOR           reduce using rule 40 (termino_pos -> empty .)
    NO_IGUAL        reduce using rule 40 (termino_pos -> empty .)
    PUNTO_COMMA     reduce using rule 40 (termino_pos -> empty .)
    PAR_DER         reduce using rule 40 (termino_pos -> empty .)
    COMMA           reduce using rule 40 (termino_pos -> empty .)


state 64

    (41) factor -> PAR_IZQ expresion . PAR_DER

    PAR_DER         shift and go to state 85


state 65

    (42) factor -> factor_pos var_cte .

    MULTIPLICACION  reduce using rule 42 (factor -> factor_pos var_cte .)
    DIVISION        reduce using rule 42 (factor -> factor_pos var_cte .)
    SUMA            reduce using rule 42 (factor -> factor_pos var_cte .)
    RESTA           reduce using rule 42 (factor -> factor_pos var_cte .)
    MAYOR           reduce using rule 42 (factor -> factor_pos var_cte .)
    MENOR           reduce using rule 42 (factor -> factor_pos var_cte .)
    NO_IGUAL        reduce using rule 42 (factor -> factor_pos var_cte .)
    PUNTO_COMMA     reduce using rule 42 (factor -> factor_pos var_cte .)
    PAR_DER         reduce using rule 42 (factor -> factor_pos var_cte .)
    COMMA           reduce using rule 42 (factor -> factor_pos var_cte .)


state 66

    (46) var_cte -> VAR_ID .

    MULTIPLICACION  reduce using rule 46 (var_cte -> VAR_ID .)
    DIVISION        reduce using rule 46 (var_cte -> VAR_ID .)
    SUMA            reduce using rule 46 (var_cte -> VAR_ID .)
    RESTA           reduce using rule 46 (var_cte -> VAR_ID .)
    MAYOR           reduce using rule 46 (var_cte -> VAR_ID .)
    MENOR           reduce using rule 46 (var_cte -> VAR_ID .)
    NO_IGUAL        reduce using rule 46 (var_cte -> VAR_ID .)
    PUNTO_COMMA     reduce using rule 46 (var_cte -> VAR_ID .)
    PAR_DER         reduce using rule 46 (var_cte -> VAR_ID .)
    COMMA           reduce using rule 46 (var_cte -> VAR_ID .)


state 67

    (47) var_cte -> VAR_INT .

    MULTIPLICACION  reduce using rule 47 (var_cte -> VAR_INT .)
    DIVISION        reduce using rule 47 (var_cte -> VAR_INT .)
    SUMA            reduce using rule 47 (var_cte -> VAR_INT .)
    RESTA           reduce using rule 47 (var_cte -> VAR_INT .)
    MAYOR           reduce using rule 47 (var_cte -> VAR_INT .)
    MENOR           reduce using rule 47 (var_cte -> VAR_INT .)
    NO_IGUAL        reduce using rule 47 (var_cte -> VAR_INT .)
    PUNTO_COMMA     reduce using rule 47 (var_cte -> VAR_INT .)
    PAR_DER         reduce using rule 47 (var_cte -> VAR_INT .)
    COMMA           reduce using rule 47 (var_cte -> VAR_INT .)


state 68

    (48) var_cte -> VAR_FLOAT .

    MULTIPLICACION  reduce using rule 48 (var_cte -> VAR_FLOAT .)
    DIVISION        reduce using rule 48 (var_cte -> VAR_FLOAT .)
    SUMA            reduce using rule 48 (var_cte -> VAR_FLOAT .)
    RESTA           reduce using rule 48 (var_cte -> VAR_FLOAT .)
    MAYOR           reduce using rule 48 (var_cte -> VAR_FLOAT .)
    MENOR           reduce using rule 48 (var_cte -> VAR_FLOAT .)
    NO_IGUAL        reduce using rule 48 (var_cte -> VAR_FLOAT .)
    PUNTO_COMMA     reduce using rule 48 (var_cte -> VAR_FLOAT .)
    PAR_DER         reduce using rule 48 (var_cte -> VAR_FLOAT .)
    COMMA           reduce using rule 48 (var_cte -> VAR_FLOAT .)


state 69

    (30) condicion -> IF PAR_IZQ expresion PAR_DER . bloque condicion_pos PUNTO_COMMA
    (13) bloque -> . BRACKET_IZQ bloque_dentro BRACKET_DER

    BRACKET_IZQ     shift and go to state 10

    bloque                         shift and go to state 86

state 70

    (25) escritura -> PRINT PAR_IZQ escritura_exp PAR_DER . PUNTO_COMMA

    PUNTO_COMMA     shift and go to state 87


state 71

    (26) escritura_exp -> expresion escritura_pos .

    PAR_DER         reduce using rule 26 (escritura_exp -> expresion escritura_pos .)


state 72

    (28) escritura_pos -> COMMA . escritura_pos
    (28) escritura_pos -> . COMMA escritura_pos
    (29) escritura_pos -> . empty
    (49) empty -> .

    COMMA           shift and go to state 72
    PAR_DER         reduce using rule 49 (empty -> .)

    escritura_pos                  shift and go to state 88
    empty                          shift and go to state 73

state 73

    (29) escritura_pos -> empty .

    PAR_DER         reduce using rule 29 (escritura_pos -> empty .)


state 74

    (27) escritura_exp -> VAR_STRING escritura_pos .

    PAR_DER         reduce using rule 27 (escritura_exp -> VAR_STRING escritura_pos .)


state 75

    (5) vars_start -> vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add .

    BRACKET_IZQ     reduce using rule 5 (vars_start -> vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add .)


state 76

    (9) vars_add -> vars_start .

    BRACKET_IZQ     reduce using rule 9 (vars_add -> vars_start .)


state 77

    (10) vars_add -> empty .

    BRACKET_IZQ     reduce using rule 10 (vars_add -> empty .)


state 78

    (21) expresion_relop -> MAYOR exp .

    PUNTO_COMMA     reduce using rule 21 (expresion_relop -> MAYOR exp .)
    PAR_DER         reduce using rule 21 (expresion_relop -> MAYOR exp .)
    COMMA           reduce using rule 21 (expresion_relop -> MAYOR exp .)


state 79

    (22) expresion_relop -> MENOR exp .

    PUNTO_COMMA     reduce using rule 22 (expresion_relop -> MENOR exp .)
    PAR_DER         reduce using rule 22 (expresion_relop -> MENOR exp .)
    COMMA           reduce using rule 22 (expresion_relop -> MENOR exp .)


state 80

    (23) expresion_relop -> NO_IGUAL exp .

    PUNTO_COMMA     reduce using rule 23 (expresion_relop -> NO_IGUAL exp .)
    PAR_DER         reduce using rule 23 (expresion_relop -> NO_IGUAL exp .)
    COMMA           reduce using rule 23 (expresion_relop -> NO_IGUAL exp .)


state 81

    (34) exp_pos -> SUMA exp .

    MAYOR           reduce using rule 34 (exp_pos -> SUMA exp .)
    MENOR           reduce using rule 34 (exp_pos -> SUMA exp .)
    NO_IGUAL        reduce using rule 34 (exp_pos -> SUMA exp .)
    PUNTO_COMMA     reduce using rule 34 (exp_pos -> SUMA exp .)
    PAR_DER         reduce using rule 34 (exp_pos -> SUMA exp .)
    COMMA           reduce using rule 34 (exp_pos -> SUMA exp .)


state 82

    (35) exp_pos -> RESTA exp .

    MAYOR           reduce using rule 35 (exp_pos -> RESTA exp .)
    MENOR           reduce using rule 35 (exp_pos -> RESTA exp .)
    NO_IGUAL        reduce using rule 35 (exp_pos -> RESTA exp .)
    PUNTO_COMMA     reduce using rule 35 (exp_pos -> RESTA exp .)
    PAR_DER         reduce using rule 35 (exp_pos -> RESTA exp .)
    COMMA           reduce using rule 35 (exp_pos -> RESTA exp .)


state 83

    (38) termino_pos -> MULTIPLICACION termino .

    SUMA            reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    RESTA           reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    MAYOR           reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    MENOR           reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    NO_IGUAL        reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    PUNTO_COMMA     reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    PAR_DER         reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)
    COMMA           reduce using rule 38 (termino_pos -> MULTIPLICACION termino .)


state 84

    (39) termino_pos -> DIVISION termino .

    SUMA            reduce using rule 39 (termino_pos -> DIVISION termino .)
    RESTA           reduce using rule 39 (termino_pos -> DIVISION termino .)
    MAYOR           reduce using rule 39 (termino_pos -> DIVISION termino .)
    MENOR           reduce using rule 39 (termino_pos -> DIVISION termino .)
    NO_IGUAL        reduce using rule 39 (termino_pos -> DIVISION termino .)
    PUNTO_COMMA     reduce using rule 39 (termino_pos -> DIVISION termino .)
    PAR_DER         reduce using rule 39 (termino_pos -> DIVISION termino .)
    COMMA           reduce using rule 39 (termino_pos -> DIVISION termino .)


state 85

    (41) factor -> PAR_IZQ expresion PAR_DER .

    MULTIPLICACION  reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    DIVISION        reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    SUMA            reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    RESTA           reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    MAYOR           reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    MENOR           reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    NO_IGUAL        reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    PUNTO_COMMA     reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    PAR_DER         reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)
    COMMA           reduce using rule 41 (factor -> PAR_IZQ expresion PAR_DER .)


state 86

    (30) condicion -> IF PAR_IZQ expresion PAR_DER bloque . condicion_pos PUNTO_COMMA
    (31) condicion_pos -> . ELSE bloque
    (32) condicion_pos -> . empty
    (49) empty -> .

    ELSE            shift and go to state 90
    PUNTO_COMMA     reduce using rule 49 (empty -> .)

    condicion_pos                  shift and go to state 89
    empty                          shift and go to state 91

state 87

    (25) escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA .

    VAR_ID          reduce using rule 25 (escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA .)
    IF              reduce using rule 25 (escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA .)
    PRINT           reduce using rule 25 (escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA .)
    BRACKET_DER     reduce using rule 25 (escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA .)


state 88

    (28) escritura_pos -> COMMA escritura_pos .

    PAR_DER         reduce using rule 28 (escritura_pos -> COMMA escritura_pos .)


state 89

    (30) condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos . PUNTO_COMMA

    PUNTO_COMMA     shift and go to state 92


state 90

    (31) condicion_pos -> ELSE . bloque
    (13) bloque -> . BRACKET_IZQ bloque_dentro BRACKET_DER

    BRACKET_IZQ     shift and go to state 10

    bloque                         shift and go to state 93

state 91

    (32) condicion_pos -> empty .

    PUNTO_COMMA     reduce using rule 32 (condicion_pos -> empty .)


state 92

    (30) condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA .

    VAR_ID          reduce using rule 30 (condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA .)
    IF              reduce using rule 30 (condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA .)
    PRINT           reduce using rule 30 (condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA .)
    BRACKET_DER     reduce using rule 30 (condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA .)


state 93

    (31) condicion_pos -> ELSE bloque .

    PUNTO_COMMA     reduce using rule 31 (condicion_pos -> ELSE bloque .)

