
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BRACKET_DER BRACKET_IZQ COMMA DIVISION DOBLE_PUNTO ELSE FLOAT IF IGUAL INT MAYOR MENOR MULTIPLICACION NO_IGUAL PAR_DER PAR_IZQ PRINT PROGRAM PUNTO_COMMA RESTA SUMA VAR VAR_FLOAT VAR_ID VAR_INT VAR_STRINGprograma : PROGRAM VAR_ID PUNTO_COMMA vars_pos bloquevars_pos : vars \n                | emptyvars : VAR vars_startvars_start : vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_addvars_id : VAR_ID vars_morevars_more : COMMA vars_id \n                | emptyvars_add : vars_start \n                | emptytipo : INT \n            | FLOATbloque : BRACKET_IZQ bloque_dentro BRACKET_DERbloque_dentro : estatuto bloque_dentro \n                    | emptyestatuto : asignacion \n                | condicion \n                | escrituraasignacion : VAR_ID IGUAL expresion PUNTO_COMMAexpresion : exp expresion_relopexpresion_relop : MAYOR exp \n                        | MENOR exp \n                        | NO_IGUAL exp \n                        | emptyescritura : PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMAescritura_exp : expresion escritura_pos \n                    | VAR_STRING escritura_posescritura_pos : COMMA escritura_pos \n                    | emptycondicion : IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMAcondicion_pos : ELSE bloque \n                    | emptyexp : termino exp_posexp_pos : SUMA exp \n                | RESTA exp \n                | emptytermino : factor termino_postermino_pos : MULTIPLICACION termino \n                    | DIVISION termino \n                    | emptyfactor : PAR_IZQ expresion PAR_DER \n                | factor_pos var_ctefactor_pos : SUMA \n                | RESTA \n                | emptyvar_cte : VAR_ID \n                | VAR_INT \n                | VAR_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,27,],[0,-1,-13,]),'VAR_ID':([2,8,10,15,17,18,19,25,29,30,31,40,41,42,43,44,49,50,52,53,54,57,58,61,62,87,92,],[3,13,20,20,-16,-17,-18,13,-49,-49,-49,-49,66,-43,-44,-45,13,-19,-49,-49,-49,-49,-49,-49,-49,-25,-30,]),'PUNTO_COMMA':([3,27,32,33,34,36,37,38,39,51,55,56,59,60,63,65,66,67,68,70,78,79,80,81,82,83,84,85,86,89,91,93,],[4,-13,49,-11,-12,50,-49,-49,-49,-20,-24,-33,-36,-37,-40,-42,-46,-47,-48,87,-21,-22,-23,-34,-35,-38,-39,-41,-49,92,-32,-31,]),'VAR':([4,],[8,]),'BRACKET_IZQ':([4,5,6,7,11,49,69,75,76,77,90,],[-49,10,-2,-3,-4,-49,10,-5,-9,-10,10,]),'BRACKET_DER':([10,14,15,16,17,18,19,28,50,87,92,],[-49,27,-49,-15,-16,-17,-18,-14,-19,-25,-30,]),'IF':([10,15,17,18,19,50,87,92,],[21,21,-16,-17,-18,-19,-25,-30,]),'PRINT':([10,15,17,18,19,50,87,92,],[22,22,-16,-17,-18,-19,-25,-30,]),'DOBLE_PUNTO':([12,13,24,26,35,],[23,-49,-6,-8,-7,]),'COMMA':([13,37,38,39,47,48,51,55,56,59,60,63,65,66,67,68,72,78,79,80,81,82,83,84,85,],[25,-49,-49,-49,72,72,-20,-24,-33,-36,-37,-40,-42,-46,-47,-48,72,-21,-22,-23,-34,-35,-38,-39,-41,]),'IGUAL':([20,],[29,]),'PAR_IZQ':([21,22,29,30,31,40,52,53,54,57,58,61,62,],[30,31,40,40,40,40,40,40,40,40,40,40,40,]),'INT':([23,],[33,]),'FLOAT':([23,],[34,]),'ELSE':([27,86,],[-13,90,]),'SUMA':([29,30,31,38,39,40,52,53,54,57,58,60,61,62,63,65,66,67,68,83,84,85,],[42,42,42,57,-49,42,42,42,42,42,42,-37,42,42,-40,-42,-46,-47,-48,-38,-39,-41,]),'RESTA':([29,30,31,38,39,40,52,53,54,57,58,60,61,62,63,65,66,67,68,83,84,85,],[43,43,43,58,-49,43,43,43,43,43,43,-37,43,43,-40,-42,-46,-47,-48,-38,-39,-41,]),'VAR_INT':([29,30,31,40,41,42,43,44,52,53,54,57,58,61,62,],[-49,-49,-49,-49,67,-43,-44,-45,-49,-49,-49,-49,-49,-49,-49,]),'VAR_FLOAT':([29,30,31,40,41,42,43,44,52,53,54,57,58,61,62,],[-49,-49,-49,-49,68,-43,-44,-45,-49,-49,-49,-49,-49,-49,-49,]),'VAR_STRING':([31,],[48,]),'MAYOR':([37,38,39,56,59,60,63,65,66,67,68,81,82,83,84,85,],[52,-49,-49,-33,-36,-37,-40,-42,-46,-47,-48,-34,-35,-38,-39,-41,]),'MENOR':([37,38,39,56,59,60,63,65,66,67,68,81,82,83,84,85,],[53,-49,-49,-33,-36,-37,-40,-42,-46,-47,-48,-34,-35,-38,-39,-41,]),'NO_IGUAL':([37,38,39,56,59,60,63,65,66,67,68,81,82,83,84,85,],[54,-49,-49,-33,-36,-37,-40,-42,-46,-47,-48,-34,-35,-38,-39,-41,]),'PAR_DER':([37,38,39,45,46,47,48,51,55,56,59,60,63,64,65,66,67,68,71,72,73,74,78,79,80,81,82,83,84,85,88,],[-49,-49,-49,69,70,-49,-49,-20,-24,-33,-36,-37,-40,85,-42,-46,-47,-48,-26,-49,-29,-27,-21,-22,-23,-34,-35,-38,-39,-41,-28,]),'MULTIPLICACION':([39,65,66,67,68,85,],[61,-42,-46,-47,-48,-41,]),'DIVISION':([39,65,66,67,68,85,],[62,-42,-46,-47,-48,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars_pos':([4,],[5,]),'vars':([4,],[6,]),'empty':([4,10,13,15,29,30,31,37,38,39,40,47,48,49,52,53,54,57,58,61,62,72,86,],[7,16,26,16,44,44,44,55,59,63,44,73,73,77,44,44,44,44,44,44,44,73,91,]),'bloque':([5,69,90,],[9,86,93,]),'vars_start':([8,49,],[11,76,]),'vars_id':([8,25,49,],[12,35,12,]),'bloque_dentro':([10,15,],[14,28,]),'estatuto':([10,15,],[15,15,]),'asignacion':([10,15,],[17,17,]),'condicion':([10,15,],[18,18,]),'escritura':([10,15,],[19,19,]),'vars_more':([13,],[24,]),'tipo':([23,],[32,]),'expresion':([29,30,31,40,],[36,45,47,64,]),'exp':([29,30,31,40,52,53,54,57,58,],[37,37,37,37,78,79,80,81,82,]),'termino':([29,30,31,40,52,53,54,57,58,61,62,],[38,38,38,38,38,38,38,38,38,83,84,]),'factor':([29,30,31,40,52,53,54,57,58,61,62,],[39,39,39,39,39,39,39,39,39,39,39,]),'factor_pos':([29,30,31,40,52,53,54,57,58,61,62,],[41,41,41,41,41,41,41,41,41,41,41,]),'escritura_exp':([31,],[46,]),'expresion_relop':([37,],[51,]),'exp_pos':([38,],[56,]),'termino_pos':([39,],[60,]),'var_cte':([41,],[65,]),'escritura_pos':([47,48,72,],[71,74,88,]),'vars_add':([49,],[75,]),'condicion_pos':([86,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM VAR_ID PUNTO_COMMA vars_pos bloque','programa',5,'p_program','parser.py',4),
  ('vars_pos -> vars','vars_pos',1,'p_vars_pos','parser.py',9),
  ('vars_pos -> empty','vars_pos',1,'p_vars_pos','parser.py',10),
  ('vars -> VAR vars_start','vars',2,'p_vars','parser.py',14),
  ('vars_start -> vars_id DOBLE_PUNTO tipo PUNTO_COMMA vars_add','vars_start',5,'p_vars_start','parser.py',17),
  ('vars_id -> VAR_ID vars_more','vars_id',2,'p_vars_id','parser.py',20),
  ('vars_more -> COMMA vars_id','vars_more',2,'p_vars_more','parser.py',24),
  ('vars_more -> empty','vars_more',1,'p_vars_more','parser.py',25),
  ('vars_add -> vars_start','vars_add',1,'p_vars_add','parser.py',29),
  ('vars_add -> empty','vars_add',1,'p_vars_add','parser.py',30),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',34),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',35),
  ('bloque -> BRACKET_IZQ bloque_dentro BRACKET_DER','bloque',3,'p_bloque','parser.py',39),
  ('bloque_dentro -> estatuto bloque_dentro','bloque_dentro',2,'p_bloque_dentro','parser.py',43),
  ('bloque_dentro -> empty','bloque_dentro',1,'p_bloque_dentro','parser.py',44),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser.py',48),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',49),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','parser.py',50),
  ('asignacion -> VAR_ID IGUAL expresion PUNTO_COMMA','asignacion',4,'p_asignacion','parser.py',54),
  ('expresion -> exp expresion_relop','expresion',2,'p_expresion','parser.py',58),
  ('expresion_relop -> MAYOR exp','expresion_relop',2,'p_expresion_relop','parser.py',62),
  ('expresion_relop -> MENOR exp','expresion_relop',2,'p_expresion_relop','parser.py',63),
  ('expresion_relop -> NO_IGUAL exp','expresion_relop',2,'p_expresion_relop','parser.py',64),
  ('expresion_relop -> empty','expresion_relop',1,'p_expresion_relop','parser.py',65),
  ('escritura -> PRINT PAR_IZQ escritura_exp PAR_DER PUNTO_COMMA','escritura',5,'p_escritura','parser.py',69),
  ('escritura_exp -> expresion escritura_pos','escritura_exp',2,'p_escritura_exp','parser.py',73),
  ('escritura_exp -> VAR_STRING escritura_pos','escritura_exp',2,'p_escritura_exp','parser.py',74),
  ('escritura_pos -> COMMA escritura_pos','escritura_pos',2,'p_escritura_pos','parser.py',78),
  ('escritura_pos -> empty','escritura_pos',1,'p_escritura_pos','parser.py',79),
  ('condicion -> IF PAR_IZQ expresion PAR_DER bloque condicion_pos PUNTO_COMMA','condicion',7,'p_condicion','parser.py',83),
  ('condicion_pos -> ELSE bloque','condicion_pos',2,'p_condicion_pos','parser.py',87),
  ('condicion_pos -> empty','condicion_pos',1,'p_condicion_pos','parser.py',88),
  ('exp -> termino exp_pos','exp',2,'p_exp','parser.py',92),
  ('exp_pos -> SUMA exp','exp_pos',2,'p_exp_pos','parser.py',95),
  ('exp_pos -> RESTA exp','exp_pos',2,'p_exp_pos','parser.py',96),
  ('exp_pos -> empty','exp_pos',1,'p_exp_pos','parser.py',97),
  ('termino -> factor termino_pos','termino',2,'p_termino','parser.py',101),
  ('termino_pos -> MULTIPLICACION termino','termino_pos',2,'p_termino_pos','parser.py',105),
  ('termino_pos -> DIVISION termino','termino_pos',2,'p_termino_pos','parser.py',106),
  ('termino_pos -> empty','termino_pos',1,'p_termino_pos','parser.py',107),
  ('factor -> PAR_IZQ expresion PAR_DER','factor',3,'p_factor','parser.py',111),
  ('factor -> factor_pos var_cte','factor',2,'p_factor','parser.py',112),
  ('factor_pos -> SUMA','factor_pos',1,'p_factor_pos','parser.py',116),
  ('factor_pos -> RESTA','factor_pos',1,'p_factor_pos','parser.py',117),
  ('factor_pos -> empty','factor_pos',1,'p_factor_pos','parser.py',118),
  ('var_cte -> VAR_ID','var_cte',1,'p_var_cte','parser.py',122),
  ('var_cte -> VAR_INT','var_cte',1,'p_var_cte','parser.py',123),
  ('var_cte -> VAR_FLOAT','var_cte',1,'p_var_cte','parser.py',124),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',131),
]
